// 2.3 ：
//if input is that：{
//            {1, 12, 13, 49},
//            {5, 16, 17, 81},
//            {9, 10, 11, 20},
//            {2, 45, 19, 14},
//             };

// wants output： 1，5，12，9，16，13，2，10，17，49，45，11，81，19，20，14



#include <stdio.h>
#include <stdlib.h>
#define N 4

void print_sq_matrix_diag(int mat[][N]) {
    
    int currCol, currRow, colUpper;

    for (int currDiag = 0; currDiag <= 2 * (N - 1); currDiag++) {  //最重要的第一步先看它有几条diagonal，因为它是沿着diagonal 一条一条 output 所以先建一个diagonal 逐渐递增
    
        if (currDiag < N) { // 把整个matrix 沿着中间的diagonal 拆分成两个三角形 （上半个三角形）
        
            currRow = colUpper = currDiag;
            currCol = 0;
            
            //currRow 和 currCol 是写它们从每一个diagonal line的哪个位置开始继续运行 （starting from where）
            
        } else { // 下半个三角形

            currRow = colUpper = N - 1;
            currCol = currDiag - N + 1;
            
            // 下半个三角形的三个点 起始点 分别是 【3，1】/【3，2】/【3，3】
        }

        for (; currCol <= colUpper; currCol++) { //currCol 小于等于 colUpper 这样 他就个可以沿着自己的斜上方，运行了 
        
            printf("%d ", mat[currRow][currCol]);
            currRow--;
            
        }
    }
}

void question3() {
    int a[][N] = {
            {1, 12, 13, 49},
            {5, 16, 17, 81},
            {9, 10, 11, 20},
            {2, 45, 19, 14},
    };
    print_sq_matrix_diag(a);
}

int main() {
   question3();
   return 0;
}


